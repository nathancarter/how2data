{"0": {
    "doc": "About",
    "title": "About",
    "content": "Here we will later describe all of the following things about this site: * project purpose * project scope * project history ",
    "url": "/how2data/site/about/",
    "relUrl": "/about/"
  },"1": {
    "doc": "Contributing",
    "title": "Contributing",
    "content": "After the site is more mature and complete, this page will cover: * how individuals can get involved by contributing content * best practices for doing so, including * writing lots of comments * breaking code into short lines rather than nested function calls * helpful variable names ",
    "url": "/how2data/site/contributing/",
    "relUrl": "/contributing/"
  },"2": {
    "doc": "How to compute a confidence interval for the mean (solution, in Python)",
    "title": "How to compute a confidence interval for the mean (solution, in Python)",
    "content": "# How to compute a confidence interval for the mean (solution, in Python) (Later we will put here a link to the task page; not yet implemented.) This solution uses a 95% confidence level, but you can change that in the first line of code, by specifing a different `alpha`. When applying this technique, you would have a series of data values for which you needed to compute a confidence interval for the mean. But in order to provide code that runs independently, we create some fake data below. When using this code, replace our fake data with your real data. ```python alpha = 0.95 data = [ 435,542,435,4,54,43,5,43,543,5,432,43,36,7,876,65,5 ] # fake # We will use NumPy to compute some of the statistics below. import numpy as np # Compute the sample mean, as an estimate for the population mean. sample_mean = np.mean( data ) # Compute the Standard Error for the sample Mean (SEM). sem = np.std( data ) / np.sqrt( len( data ) ) # The margin of error then has the following formula. moe = sem * stats.t.ppf( ( 1 + alpha ) / 2, len( data ) - 1 ) # The confidence interval is centered on the mean with moe as its radius: ( sample_mean - moe, sample_mean + moe ) ``` Contributed by Nathan Carter (ncarter@bentley.edu) ",
    "url": "/how2data/site/how-to-compute-a-confidence-interval-for-the-mean-solution-in-python/",
    "relUrl": "/how-to-compute-a-confidence-interval-for-the-mean-solution-in-python/"
  },"3": {
    "doc": "How to compute a confidence interval for the mean (solution, in R)",
    "title": "How to compute a confidence interval for the mean (solution, in R)",
    "content": "# How to compute a confidence interval for the mean (solution, in R) (Later we will put here a link to the task page; not yet implemented.) This solution uses a 95% confidence level, but you can change that in the first line of code, by specifing a different `alpha`. When applying this technique, you would have a series of data values for which you needed to compute a confidence interval for the mean. But in order to provide code that runs independently, we create some fake data below. When using this code, replace our fake data with your real data. ```R alpha <- 0.95 data <- c( 435,542,435,4,54,43,5,43,543,5,432,43,36,7,876,65,5 ) # fake # If you need the two values stored in variables for later use, do: answer <- t.test( data, conf.level=alpha ) lower_bound <- answer$conf.int[1] upper_bound <- answer$conf.int[2] # If you just need to see the results in a report, do this alone: t.test( data, conf.level=alpha ) ``` Contributed by Nathan Carter (ncarter@bentley.edu) ",
    "url": "/how2data/site/how-to-compute-a-confidence-interval-for-the-mean-solution-in-r/",
    "relUrl": "/how-to-compute-a-confidence-interval-for-the-mean-solution-in-r/"
  },"4": {
    "doc": "How to fit a linear model to two columns of data (solution, in Python)",
    "title": "How to fit a linear model to two columns of data (solution, in Python)",
    "content": "# How to fit a linear model to two columns of data (solution, in Python) (Later we will put here a link to the task page; not yet implemented.) This solution uses a pandas DataFrame of fake example data. When using this code, replace our fake data with your real data. Although the solution below uses plain Python lists of data, it also works if the data are stored in NumPy arrays or pandas Series. ```python # Here is the fake data you should replace with your real data. xs = [ 393, 453, 553, 679, 729, 748, 817 ] ys = [ 24, 25, 27, 36, 55, 68, 84 ] # We will use SciPy to build the model import scipy.stats as stats # If you need the model coefficients stored in variables for later use, do: model = stats.linregress( xs, ys ) beta0 = model.intercept beta1 = model.slope # If you just need to see the coefficients (and some other related data), # do this alone: stats.linregress( xs, ys ) ``` Contributed by Nathan Carter (ncarter@bentley.edu) ",
    "url": "/how2data/site/how-to-fit-a-linear-model-to-two-columns-of-data-solution-in-python/",
    "relUrl": "/how-to-fit-a-linear-model-to-two-columns-of-data-solution-in-python/"
  },"5": {
    "doc": "How to fit a linear model to two columns of data (solution, in R)",
    "title": "How to fit a linear model to two columns of data (solution, in R)",
    "content": "# How to fit a linear model to two columns of data (solution, in R) (Later we will put here a link to the task page; not yet implemented.) This solution uses fake example data. When using this code, replace our fake data with your real data. ```R # Here is the fake data you should replace with your real data. xs <- c( 393, 453, 553, 679, 729, 748, 817 ) ys <- c( 24, 25, 27, 36, 55, 68, 84 ) # If you need the model coefficients stored in variables for later use, do: model <- lm( ys ~ xs ) beta0 = model$coefficients[1] beta1 = model$coefficients[2] # If you just need to see the coefficients, do this alone: lm( ys ~ xs ) ``` Contributed by Nathan Carter (ncarter@bentley.edu) ",
    "url": "/how2data/site/how-to-fit-a-linear-model-to-two-columns-of-data-solution-in-r/",
    "relUrl": "/how-to-fit-a-linear-model-to-two-columns-of-data-solution-in-r/"
  },"6": {
    "doc": "Welcome",
    "title": "Welcome",
    "content": "# Welcome to *How to Data!* This is a how-to website for students of data science. It will contain answers to a wide variety of how-to questions about data-related software and programming languages. **But right now, it's still under construction.** Please check back later to see what this site will become. ",
    "url": "/how2data/site/",
    "relUrl": "/"
  },"7": {
    "doc": "Software Packages",
    "title": "Software Packages",
    "content": "Here is a list of the software packages that appear in the solutions on this website. This list can include standard applications like Microsoft Excel, web-based applications like Google Sheets, or programming languages like Python and R. | Software Package | Icon | Number of solutions | Website |:-------------------|:------------------------------------------------------------------------------------------------------------------------------------|----------------------:|:---------------------------------------------------------| Python | ![Python icon](https://upload.wikimedia.org/wikipedia/commons/thumb/0/0a/Python.svg/240px-Python.svg.png){: style=\"height: 50px;\" } | nan | [https://www.python.org/](https://www.python.org/) | R | ![R icon](https://www.r-project.org/logo/Rlogo.png){: style=\"height: 50px;\" } | nan | [https://www.r-project.org/](https://www.r-project.org/) | ",
    "url": "/how2data/site/software/",
    "relUrl": "/software/"
  },"8": {
    "doc": "Tasks",
    "title": "Tasks",
    "content": "This database is a list of tasks that students of data science may want to know how to accomplished, all phrased as \"How to\" questions. The table below lists *all* questions in the database. | Task | Solutions in Python | Solutions in R |:--------------------------------------------------|----------------------:|-----------------:| How to compute a confidence interval for the mean | nan | nan | How to do a hypothesis test for the mean | nan | nan | How to fit a linear model to two columns of data | nan | nan | ",
    "url": "/how2data/site/tasks/",
    "relUrl": "/tasks/"
  }
}
